// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// KafkaRepository is an autogenerated mock type for the KafkaRepository type
type KafkaRepository struct {
	mock.Mock
}

// Read provides a mock function with given fields:
func (_m *KafkaRepository) Read() (<-chan int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 <-chan int
	var r1 error
	if rf, ok := ret.Get(0).(func() (<-chan int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() <-chan int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: _a0
func (_m *KafkaRepository) Send(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKafkaRepository creates a new instance of KafkaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaRepository {
	mock := &KafkaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
