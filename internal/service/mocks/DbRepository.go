// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Foxtrot1388/MessaggioTask/internal/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/Foxtrot1388/MessaggioTask/internal/model"

	time "time"
)

// DbRepository is an autogenerated mock type for the DbRepository type
type DbRepository struct {
	mock.Mock
}

// AddStatistic provides a mock function with given fields: _a0, _a1
func (_m *DbRepository) AddStatistic(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddStatistic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *DbRepository) Create(_a0 context.Context, _a1 []string) ([]entity.OutputMessage, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 []entity.OutputMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]entity.OutputMessage, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []entity.OutputMessage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.OutputMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOutbox provides a mock function with given fields: _a0, _a1
func (_m *DbRepository) CreateOutbox(_a0 context.Context, _a1 []model.OutputMessage) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOutbox")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.OutputMessage) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteForOutboxByID provides a mock function with given fields: _a0, _a1
func (_m *DbRepository) DeleteForOutboxByID(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteForOutboxByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectForOutbox provides a mock function with given fields: _a0
func (_m *DbRepository) SelectForOutbox(_a0 context.Context) ([]entity.OutputMessageOutbox, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SelectForOutbox")
	}

	var r0 []entity.OutputMessageOutbox
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.OutputMessageOutbox, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.OutputMessageOutbox); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.OutputMessageOutbox)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectStatistic provides a mock function with given fields: _a0, _a1, _a2
func (_m *DbRepository) SelectStatistic(_a0 context.Context, _a1 time.Time, _a2 time.Time) ([]entity.StatMessage, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SelectStatistic")
	}

	var r0 []entity.StatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]entity.StatMessage, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []entity.StatMessage); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.StatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateForOutboxByID provides a mock function with given fields: _a0, _a1
func (_m *DbRepository) UpdateForOutboxByID(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateForOutboxByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTr provides a mock function with given fields: _a0, _a1
func (_m *DbRepository) WithTr(_a0 context.Context, _a1 func(context.Context) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WithTr")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (interface{}, error)) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (interface{}, error)) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(context.Context) (interface{}, error)) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDbRepository creates a new instance of DbRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbRepository {
	mock := &DbRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
